# -*- coding: utf-8 -*-
"""Text_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kbFFI_FZRAGzQdnKEIVvlWiH_qlUd0ll
"""

import pandas as pd
import tensorflow as tf

df = pd.read_csv('train.csv')

df.shape

df = df.dropna()

x = df.drop('label', axis = 1)
y = df['label']

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Embedding
from tensorflow.keras.layers import Flatten
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.preprocessing.text import one_hot
from tensorflow.keras.layers import LSTM

voc_size = 5000

message = x.copy()
message.reset_index(inplace=True)

import nltk
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

nltk.download('stopwords')

ps = PorterStemmer()
corpus = []
for i in range(0, len(message)):
  review = re.sub('[^a-zA-Z]', ' ', message['title'][i])
  review = review.lower()
  review = review.split()
  review = [ps.stem(word) for word in review if not word in stopwords.words('english')]
  review = ' '.join(review)
  corpus.append(review)

corpus

onehot_repr = [one_hot(words, voc_size) for words in corpus]
onehot_repr

sent_length = 20
embedded_docs = pad_sequences(onehot_repr, padding ='pre', maxlen = sent_length)

len(embedded_docs)

# create model
embedding_vector_feature = 40
model = Sequential()
model.add(Embedding(voc_size, embedding_vector_feature, input_length = sent_length))
model.add(LSTM(100))
model.add(Dense(1, activation = 'sigmoid'))
model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])
model.summary()

import numpy as np

x_final = np.array(embedded_docs)
y_final = np.array(y)

from sklearn.model_selection import train_test_split
x_train , x_test, y_train , y_test = train_test_split(x_final, y_final, test_size = 0.33, random_state = 42)

model.fit(x_train , y_train, validation_data=(x_test, y_test), epochs=10, batch_size=64)

y_pred = model.predict_classes(x_test)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, y_pred)

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_pred)

